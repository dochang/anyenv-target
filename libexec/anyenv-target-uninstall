#!/usr/bin/env bash
# Summary: Uninstall all targets
#
# Usage: anyenv target uninstall [OPTIONS...] TARGET [TARGET ...]
#
#   -f/--force    Attempt to remove the specified TARGET without prompting for
#                 confirmation. If the TARGET does not exist, do not display an
#                 error message.
#   -v/--verbose  Run verbosely
#   -h/--help     Show this message
#
# See `anyenv envs` for a complete list of installed envs.

# shellcheck source=lib/common.bash
. "${ANYENV_TARGET_ROOT:-$(dirname "${BASH_SOURCE[0]}")/..}/lib/common.bash"

### uninstall functions

# Provide anyenv completions
uninstall_completions() {
  echo --help
  echo --force
  echo --verbose
  exec anyenv envs --bare
}

uninstall_usage() {
  anyenv-help target-uninstall 2>/dev/null
  [ -z "$1" ] || exit "$1"
}

remove_target_dir() {
  local should_remove
  should_remove=

  if [ -d "$TARGET_DIR" ]; then
    if [ -z "$FORCE" ]; then
      read -r -p "anyenv: Uninstall $(target_name) ? "
      case "$REPLY" in
      y* | Y*) should_remove=true ;;
      *) should_remove= ;;
      esac
    fi

    if [ -n "$FORCE" ] || [ -n "$should_remove" ]; then
      if [ -n "$VERBOSE" ]; then
        echo "Uninstalling '$(target_name)'..."
      fi
      rm -rf "$TARGET_DIR"
    fi
  else
    if [ -z "$FORCE" ]; then
      echo "anyenv: \`$(target_name)' not installed" >&2
    fi
  fi

  print_horizontal_separator
}

uninstall_target() {
  local target
  target="$1"

  set_env_and_plugin "$target"

  if [ "$ENV" = anyenv ] && [ "$ENV" = "$PLUGIN" ]; then
    echo "Unable to uninstall anyenv." >&2
    return
  fi

  set_target_dir

  remove_target_dir

}

cmd_uninstall() {
  if [ "$1" = "--complete" ]; then
    uninstall_completions
    exit
  fi

  parse_options "$@"
  for option in "${OPTIONS[@]}"; do
    case "$option" in
    "h" | "help")
      uninstall_usage 0
      ;;
    "f" | "force")
      FORCE=true
      ;;
    "v" | "verbose")
      VERBOSE=true
      ;;
    *)
      echo "no such option: ${option}" >&2
      echo
      uninstall_usage 1 >&2
      ;;
    esac
  done

  for arg in "${ARGUMENTS[@]}"; do
    uninstall_target "$arg"
  done
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  set -e
  [ -z "$ANYENV_DEBUG" ] || set -x

  cmd_uninstall "${@}"
fi
